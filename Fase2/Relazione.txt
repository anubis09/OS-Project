Per la realizzazione della fase 2, abbiamo seguito fedelmente quanto indicato nel capitolo 3 di Pandos.
In initialize.h sono dichiarate le variabili globali del kernel.
Abbiamo poi scelto di rappresentare i semafori di device,come un unico array, per facilitare il controllo 
di appartenenza di un semaforo ai semafori di device. In questo modo si complica l'accesso al semaforo corretto,
per questo in include.c abbiamo aggiunto una funzione per semplificare questa operazione.

Nella syscall PASSEREN abbiamo deciso di andare in PANIC nel caso in cui non fosse possibile allocare nuovi semafori.
Nel caso in cui le SYSCALL siano malformate, vengono ignorate.
Abbiamo deciso di aggiornare il valore p_time del current process, solo quando finisce il suo time slice, oppure quando viene bloccato
su un semaforo. Durante la SYSCALL 6 non viene aggiornato.

In interrupts.c abbiamo implementato una versione alternativa della SYSCALL 4, per fare in modo che ritorni il processo sbloccato. Questo 
è utile per quando si affrontano i device interrupts, perchè bisogna inserire nel registro v0 del processo sbloccato il valore dello 
status del device.
Se riceviamo un interrupt di linea 0, andiamo in PANIC, in quanto non dovrebbe presentarsi in un ambiente uniprocessore come Pandos.